const colorInvert = require("../invertColors");

const data = [
  [
    [165, 170, 119],
    [90, 85, 136]
  ],
  [
    [165, 170, 136],
    [90, 85, 119]
  ],
  [
    [165, 170, 153],
    [90, 85, 102]
  ],
  [
    [165, 170, 170],
    [90, 85, 85]
  ],
  [
    [165, 170, 187],
    [90, 85, 68]
  ],
  [
    [165, 170, 204],
    [90, 85, 51]
  ],
  [
    [165, 170, 221],
    [90, 85, 34]
  ],
  [
    [165, 170, 238],
    [90, 85, 17]
  ],
  [
    [165, 180, 0],
    [90, 75, 255]
  ],
  [
    [165, 180, 17],
    [90, 75, 238]
  ],
  [
    [165, 180, 34],
    [90, 75, 221]
  ],
  [
    [165, 180, 51],
    [90, 75, 204]
  ],
  [
    [165, 180, 68],
    [90, 75, 187]
  ],
  [
    [165, 180, 85],
    [90, 75, 170]
  ],
  [
    [165, 180, 102],
    [90, 75, 153]
  ],
  [
    [0, 0, 0],
    [255, 255, 255]
  ],
  [
    [0, 0, 17],
    [255, 255, 238]
  ],
  [
    [0, 0, 34],
    [255, 255, 221]
  ],
  [
    [0, 0, 51],
    [255, 255, 204]
  ],
  [
    [0, 0, 68],
    [255, 255, 187]
  ],
  [
    [240, 250, 153],
    [15, 5, 102]
  ],
  [
    [240, 250, 170],
    [15, 5, 85]
  ],
  [
    [240, 250, 187],
    [15, 5, 68]
  ],
  [
    [240, 250, 204],
    [15, 5, 51]
  ],
  [
    [240, 250, 221],
    [15, 5, 34]
  ]
];

describe("colorInvert", () => {
  describe("Return inverted RGB values", () => {
    test.each(data)("colorInvert(%p) = %p", (rgb, result) => {
      let actual = colorInvert(rgb);

      expect(actual).toEqual(result);
    });
  });
});
